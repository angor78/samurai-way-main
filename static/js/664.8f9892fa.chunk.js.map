{"version":3,"file":"static/js/664.8f9892fa.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/textarea/dist/chakra-ui-textarea.esm.js","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?42be","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withRouter.tsx"],"sourcesContent":["import { useFormControl } from '@chakra-ui/form-control';\nimport { forwardRef, useStyleConfig, omitThemingProps, chakra } from '@chakra-ui/system';\nimport { omit, cx, __DEV__ } from '@chakra-ui/utils';\nimport * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded = [\"className\", \"rows\"];\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nvar Textarea = /*#__PURE__*/forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Textarea\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      className = _omitThemingProps.className,\n      rows = _omitThemingProps.rows,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, _excluded);\n\n  var textareaProps = useFormControl(rest);\n  var textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /*#__PURE__*/React.createElement(chakra.textarea, _extends({\n    ref: ref,\n    rows: rows\n  }, textareaProps, {\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  }));\n});\n\nif (__DEV__) {\n  Textarea.displayName = \"Textarea\";\n}\n\nexport { Textarea };\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Box, Input} from \"@chakra-ui/react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  userId: number\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [status, setStatus] = useState(props.status)\r\n  let authUserId = useSelector<AppStateType, number>(state => state.auth.id)\r\n  useEffect(()=>{setStatus(props.status)},[props.status])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      {props.userId === authUserId && editMode\r\n        ?\r\n        <Box>\r\n          <Input autoFocus={true}\r\n                 value={status}\r\n                 onChange={onChangeHandler}\r\n                 onBlur={deactivateEditMode}\r\n                 size='xs'\r\n                 focusBorderColor='red.400'\r\n          />\r\n        </Box>\r\n        :\r\n        <Box>\r\n          <div onClick={activateEditMode}>{props.status}</div>\r\n        </Box>}\r\n    </Box>\r\n\r\n  )\r\n\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {Badge, Box, Button, CircularProgress, Image, Textarea} from \"@chakra-ui/react\";\r\nimport {ProfileType} from \"../../../redux/storeTypes\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype ProfileInfoType = {\r\n  profile: ProfileType\r\n  newPostText: string\r\n  changePost: (text: string) => void\r\n  addPost: (text: string) => void\r\n  updateStatus: (status: string) => void\r\n  status: string\r\n}\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n  const onClickAddPostHandler = () => {\r\n    props.addPost(props.newPostText)\r\n  }\r\n  const onChangePostHandle = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    props.changePost(e.currentTarget.value)\r\n  }\r\n  if (!props.profile) {\r\n    return <Box width={'100%'} textAlign={'center'}>\r\n      <CircularProgress isIndeterminate color='teal.300' size='220px'/>\r\n    </Box>\r\n  } else {\r\n    return (\r\n      <Box minW={'300'} maxW={'300'} p={'7'} borderWidth='1px' borderRadius='lg' overflow='hidden'\r\n           alignItems={'top'}>\r\n        <Box>\r\n          <Box borderWidth='1px' borderRadius='lg' p={'5'} maxW={'420px'}>\r\n            <Box display={'flex'} flexDirection={'column'} alignItems={'center'}>\r\n              <Badge borderRadius='full' px='5' colorScheme='red' mb={'3'} maxW={'400px'}>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus} userId={props.profile.userId}/>\r\n              </Badge>\r\n              <Box>\r\n                <Image\r\n                  borderRadius='full'\r\n                  alt={'1111'}\r\n                  src={\r\n                    props.profile.photos.large ? props.profile.photos.large : 'https://cdn-icons-png.flaticon.com/512/560/560216.png'\r\n                  }\r\n                />\r\n              </Box>\r\n\r\n              <Box textAlign={'center'}>\r\n                <Badge borderRadius='full' px='5' colorScheme='blue'>\r\n                  Name: {props.profile.fullName}\r\n                </Badge>\r\n                <Badge borderRadius='full' px='2' colorScheme='teal'>\r\n                  About me: {props.profile.aboutMe}\r\n                </Badge>\r\n                <Badge borderRadius='full' px='2' colorScheme='teal'>\r\n                  userId: {props.profile.userId}\r\n                </Badge>\r\n                <Badge borderRadius='full' px='2' colorScheme='blue'>\r\n                  Github: {props.profile.contacts.github}\r\n                </Badge>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n          <Textarea mt={'15'} placeholder='New post...' onChange={onChangePostHandle} value={props.newPostText}/>\r\n          <Button colorScheme='teal' mt={'15'} mb={'5'} size='sm' onClick={onClickAddPostHandler}>\r\n            Add post\r\n          </Button>\r\n        </Box>\r\n      </Box>)\r\n  }\r\n\r\n}\r\nexport default ProfileInfo\r\n\r\n","import React from \"react\";\r\nimport {StarIcon} from \"@chakra-ui/icons\";\r\nimport {Badge, Box, Image} from \"@chakra-ui/react\";\r\nimport {PostType} from \"../../../../redux/storeTypes\";\r\n\r\n\r\nfunction Post(props: PostType) {\r\n\r\n  const property = {\r\n    date: 3,\r\n    time: 223,\r\n    title: 'Something title post',\r\n    message: props.message,\r\n    likes: props.likeCount,\r\n    reviewCount: 34,\r\n    rating: 4,\r\n    photo: props.photo\r\n  }\r\n\r\n  return (\r\n    <Box margin={3} borderWidth='1px' borderRadius='lg' overflow={'hidden'} padding={'5'} >\r\n      <Box p='6'>\r\n        <Box display='flex' alignItems='baseline'>\r\n          <Badge borderRadius='full' px='2' colorScheme='teal'>\r\n            New\r\n          </Badge>\r\n          <Box\r\n            color='gray.500'\r\n            fontWeight='semibold'\r\n            letterSpacing='wide'\r\n            fontSize='xs'\r\n            textTransform='uppercase'\r\n            ml='2'\r\n          >\r\n            {property.date} day ago &bull; {property.time} time\r\n          </Box>\r\n\r\n        </Box>\r\n        <Box p={'10px'} textAlign={'left'}>\r\n          <Image align={'center'} src={property.photo} boxSize='100%'/>\r\n        </Box>\r\n\r\n        <Box\r\n          mt='1'\r\n          fontWeight='semibold'\r\n          as='h4'\r\n          lineHeight='tight'\r\n          noOfLines={1}\r\n        >\r\n          {property.title}\r\n        </Box>\r\n        <Box>\r\n          {property.message}\r\n          <Box as='span' color='gray.600' fontSize='sm'>\r\n          </Box>\r\n        </Box>\r\n        <Box display='flex' mt='2' alignItems='center'>\r\n          {Array(5)\r\n            .fill('')\r\n            .map((_, i) => (\r\n              <StarIcon\r\n                key={i}\r\n                color={i < property.rating ? 'teal.500' : 'gray.300'}\r\n              />\r\n            ))}\r\n          <Box as='span' ml='2' color='gray.600' fontSize='sm'>\r\n            {property.likes} likes\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__BOegi\",\"posts\":\"MyPosts_posts__cKfQO\",\"post\":\"MyPosts_post__0IXCs\"};","import React from \"react\";\r\nimport Post from \"./Post/Post\"\r\nimport s from \"./MyPosts.module.css\"\r\nimport {Center} from \"@chakra-ui/react\";\r\nimport {PostType} from \"../../../redux/storeTypes\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n  posts: Array<PostType>\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n  let postsElements = props.posts.map(p => <span key={p.id}>{\r\n    <Post id={p.id} message={p.message} likeCount={p.likeCount} photo={p.photo}/>\r\n  }</span>)\r\n\r\n\r\n  return (<div className={s.content}>\r\n    <Center display={'flex'} flexWrap={\"wrap\"}>\r\n      {postsElements}\r\n    </Center>\r\n  </div>)\r\n})\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {Center, Wrap, WrapItem} from \"@chakra-ui/react\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n  return (\r\n\r\n      <Wrap spacing='30px' display={\"flex\"} flexWrap={'wrap'}>\r\n        <WrapItem>\r\n          <Center ml={'20px'} mt={'10px'} display={'flex'} flexDirection={'column'}>\r\n            <ProfileInfo profile={props.profilePage.profile}\r\n                         status={props.status}\r\n                         addPost={props.addPost}\r\n                         updateStatus={props.updateStatus}\r\n                         newPostText={props.profilePage.newTextPost}\r\n                         changePost={props.changeTextPost}/>\r\n          </Center>\r\n        </WrapItem>\r\n        <WrapItem minWidth={'350'}\r\n                  width={'70%'}\r\n                  display={\"flex\"}\r\n                  overflow='hidden'>\r\n          <MyPosts posts={props.profilePage.posts}/>\r\n        </WrapItem>\r\n    </Wrap>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default Profile","import \"./Profile.module.css\"\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  addPost,\r\n  changeTextPost, getStatus, getUserProfile,\r\n  initialProfileStateType, setUserProfile, updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {withRouter} from \"../../hoc/withRouter\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ProfileClassContainerType = ProfilePropsType & {\r\n  router: { params: { userId: string } }\r\n  getUserProfile: (userId: string) => void\r\n  getStatus: (userId: string) => void\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileClassContainer extends React.Component<ProfileClassContainerType> {\r\n\r\n  componentDidMount() {\r\n    let userId = this.props.router.params.userId\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatus(userId)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile {...this.props} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n//REACT-REDUX CONNECT\r\ntype MapStatePropsType = {\r\n  profilePage: initialProfileStateType\r\n  status: string\r\n}\r\ntype MapDispatchPropsType = {\r\n  addPost: () => void\r\n  changeTextPost: (text: string) => void\r\n  setUserProfile: (profile: any) => void\r\n  updateStatus: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    profilePage: state.profilePage,\r\n    status: state.profilePage.status\r\n  }\r\n}\r\n\r\n// export default withAuthRedirect(connect(mapStateToProps,\r\n//   {addPost, changeTextPost, setUserProfile, getUserProfile})\r\n// (withRouter(ProfileClassContainer)))\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps,\r\n    {addPost, changeTextPost, setUserProfile, getUserProfile, getStatus, updateStatus}),\r\n  withRouter,\r\n  // withAuthRedirect\r\n)(ProfileClassContainer)\r\n","import {useParams} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {ProfilePropsType} from \"../components/Profile/ProfileContainer\";\r\n\r\n\r\nexport function withRouter(Component: any) {\r\n  function ComponentWithRouterProp(props: ProfilePropsType) {\r\n    let params = useParams();\r\n    return (\r\n      <Component\r\n        {...props}\r\n        router={{params}}\r\n      />\r\n    );\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_excluded","omitted","Textarea","forwardRef","props","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","className","rows","rest","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","textareaProps","useFormControl","textareaStyles","omit","React","chakra","cx","__css","__DEV__","displayName","ProfileStatus","useState","editMode","setEditMode","status","setStatus","authUserId","useSelector","state","auth","id","useEffect","userId","autoFocus","value","onChange","e","currentTarget","onBlur","updateStatus","size","focusBorderColor","onClick","profile","minW","maxW","p","borderWidth","borderRadius","overflow","alignItems","display","flexDirection","px","colorScheme","mb","alt","src","photos","large","textAlign","fullName","aboutMe","contacts","github","mt","placeholder","changePost","newPostText","addPost","width","isIndeterminate","color","property","date","time","title","message","likes","likeCount","reviewCount","rating","photo","margin","padding","fontWeight","letterSpacing","fontSize","textTransform","ml","align","boxSize","as","lineHeight","noOfLines","Array","fill","map","_","postsElements","posts","s","flexWrap","spacing","profilePage","newTextPost","changeTextPost","minWidth","ProfileClassContainer","router","params","getUserProfile","getStatus","compose","connect","setUserProfile","Component","useParams"],"sourceRoot":""}